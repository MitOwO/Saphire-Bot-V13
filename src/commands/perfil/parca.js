const { e } = require('../../../database/emojis.json')
const { f } = require('../../../database/frases.json')
const Colors = require('../../../Routes/functions/colors')
const Error = require('../../../Routes/functions/errors')
const Data = require('../../../Routes/functions/data')

module.exports = {
    name: 'parca',
    aliases: ['par√ßas', 'amigos', 'par√ßa', 'amigo'],
    category: 'perfil',
    ClientPermissions: 'ADD_REACTIONS',
    emoji: 'c',
    usage: '<par√ßas> <1/2/3/4/5> <@user/id>',
    description: 'Junte seus par√ßas no seu perfil',

    run: async (client, message, args, prefix, db, MessageEmbed, request, sdb) => {

        let user = message.mentions.members.first() || message.mentions.repliedUser || message.guild.members.cache.get(args[1])
        const Embed = new MessageEmbed().setColor(Colors(message.member))

        if (['info', 'help', 'ajuda'].includes(args[0]?.toLowerCase())) return SendInfo()
        if (['separar', 'delete', 'deletar', 'excluir'].includes(args[0]?.toLowerCase())) return DeleteParcaPosition()

        if (!args[0] || args[0] > 5 || args[0] < 1)
            return message.reply(`${e.Deny} | Voc√™ tem que dizer qual √© a posi√ß√£o! Se tiver d√∫vidas, use \`${prefix}par√ßa info\``)

        let number = {
            1: 'Um',
            2: 'Dois',
            3: 'Tres',
            4: 'Quatro',
            5: 'Cinco'
        }[args[0]]

        user ? CheckAndSetParca() : message.reply(`${e.Deny} | Voc√™ tem que dizer qual √© o @membro! Se tiver d√∫vidas, use \`${prefix}par√ßa info\``)

        function CheckAndSetParca() {

            if (sdb.get(`Users.${message.author.id}.Perfil.Marry`) === user.id) return message.reply(`${e.Info} | ${user.user.username} √© seu c√¥njuge.`)
            if ((sdb.get(`Users.${message.author.id}.Perfil.Family.Um`) || sdb.get(`Users.${message.author.id}.Perfil.Family.Dois`) || sdb.get(`Users.${message.author.id}.Perfil.Family.Tres`)) === user.id) return message.reply(`${e.Info} | Voc√™ j√° √© familiar de ${user.user.username}`)
            if (sdb.get(`Users.${user.id}.Perfil.Parcas.${number}`)) return message.reply(`${e.Info} | ${user.user.username} j√° tem um par√ßa na posi√ß√£o ${number}.`)
            if (sdb.get(`Users.${message.author.id}.Perfil.Parcas.${number}`)) return message.reply(`${e.Info} | ${GetUser(sdb.get(`Users.${message.author.id}.Perfil.Parcas.${number}`), number)} √© seu par√ßa na posi√ß√£o ${number}`)
            if (user.id === message.author.id) return message.reply(`${e.Deny} | Voc√™ n√£o pode ser par√ßa de voc√™ mesmo.`)
            if (user.id === client.user.id) return message.reply(`${e.Deny} | Sorry... N√£o posso ter par√ßas.`)
            if (user.user.bot) return message.reply(`${e.Deny} | Sorry... Nada de bots.`)
            NewParcaSet()

        }

        function NewParcaSet() {

            return message.reply(`${e.QuestionMark} | ${user}, voc√™ est√° sendo convidado*(a)* para ser par√ßa de ${message.author}, voc√™ aceita?`).then(msg => {
                sdb.set(`Request.${message.author.id}`, `${msg.url}`)
                msg.react('‚úÖ').catch(() => { }) // Check
                msg.react('‚ùå').catch(() => { }) // X

                const filter = (reaction, u) => { return ['‚úÖ', '‚ùå'].includes(reaction.emoji.name) && u.id === user.id }

                msg.awaitReactions({ filter, max: 1, time: 60000, errors: ['time'] }).then(collected => {
                    const reaction = collected.first()

                    if (reaction.emoji.name === '‚úÖ') {
                        sdb.delete(`Request.${message.author.id}`)
                        sdb.set(`Users.${message.author.id}.Perfil.Parcas.${number}`, user.id)
                        sdb.set(`Users.${user.id}.Perfil.Parcas.${number}`, message.author.id)
                        msg.edit(`${e.Check} | ${user} ü§ù ${message.author} agora s√£o par√ßas!`).catch(() => { })
                    } else {
                        sdb.delete(`Request.${message.author.id}`)
                        msg.edit(`${e.Deny} | Pedido recusado.`).catch(() => { })
                    }
                }).catch(() => {
                    sdb.delete(`Request.${message.author.id}`)
                    msg.edit(`${e.Deny} | Pedido recusado por tempo expirado.`).catch(() => { })
                })

            }).catch(err => {
                Error(message, err)
                message.channel.send(`${e.SaphireCry} | Ocorreu um erro durante o processo. Por favor, reporte o ocorrido usando \`${prefix}bug\`\n\`${err}\``)
            })

        }

        async function GetUser(id, number) {
            let User = await client.users.cache.get(id)

            if (!User) {
                sdb.set(`Users.${message.author.id}.Perfil.Parcas.${number}`, false)
                sdb.delete(`Users.${id}`)
            }

            User ? User = User.tag : User = 'Par√ßa n√£o encontrado.'
            return User
        }

        function SendInfo() {
            return message.reply({
                embeds: [
                    Embed.setTitle(`ü§ù ${client.user.username} Profile System | Par√ßas `)
                        .setDescription(`Voc√™ pode escolher at√© 5 membros para serem seus par√ßas! Eles ficaram vis√≠veis no seu perfil e seu nome no perfil deles.`)
                        .addFields(
                            {
                                name: '- Posi√ß√µes',
                                value: 'Este sistema tem 5 posi√ß√µes. Voc√™ e a pessoa que v√£o se tornarem par√ßas, devem ter a mesma posi√ß√£o livre.\nExemplo: Se voc√™ convidar a @Saphire para a posi√ß√£o 1 e ela j√° estiver com a posi√ß√£o 1 ocupada, n√£o ser√° poss√≠vel a jun√ß√£o.'
                            },
                            {
                                name: `${e.Gear} Comando`,
                                value: `\`${prefix}par√ßa <1/2/3/4/5> <@user/id>\`\nExemplo: \`${prefix}par√ßa 2 @Saphire\` *(Posi√ß√£o 2)*`
                            },
                            {
                                name: 'üíî Separa√ß√£o',
                                value: `\`${prefix}par√ßa <separar> <1/2/3/4/5>\` *(Necessita de confirma√ß√£o)*`
                            }
                        )
                ]
            })
        }

        async function DeleteParcaPosition() {
            if (request) return message.reply(`${e.Deny} | ${f.Request}${sdb.get(`Request.${message.author.id}`)}`)
            if (!args[1] || args[1] > 5 || args[1] < 1)
                return message.reply(`${e.Deny} | Voc√™ tem que dizer qual √© a posi√ß√£o que deseja deletar, de 1 a 5! Se tiver d√∫vidas, use \`${prefix}par√ßa info\``)

            let position = {
                1: 'Um',
                2: 'Dois',
                3: 'Tres',
                4: 'Quatro',
                5: 'Cinco'
            }[args[1]]

            if (!sdb.get(`Users.${message.author.id}.Perfil.Parcas.${position}`))
                return message.reply(`${e.Deny} | Voc√™ n√£o tem nenhum par√ßa na posi√ß√£o ${position}`)

            let Fam = await client.users.cache.get(sdb.get(`Users.${message.author.id}.Perfil.Parcas.${position}`))
            if (!Fam) {
                return message.reply(`${e.Loading} | Usu√°rio desconhecido. Apagando dados...`).then(msg => {
                    setTimeout(() => {
                        sdb.delete(`Users.${sdb.get(`Users.${message.author.id}.Perfil.Parcas.${position}`)}`)
                        sdb.set(`Users.${message.author.id}.Perfil.Parcas.${position}`, false)
                        msg.edit(`${e.Check} | Padr√£o restaurado!`)
                    }, 4000)
                })
            }

            return message.reply(`${e.QuestionMark} | Voc√™ confirma a separa√ß√£o de par√ßas entre \`${message.author.tag} & ${Fam.tag}\`?`).then(msg => {
                sdb.set(`Request.${message.author.id}`, `${msg.url}`)
                msg.react('‚úÖ').catch(() => { }) // Check
                msg.react('‚ùå').catch(() => { }) // X

                const filter = (reaction, user) => { return ['‚úÖ', '‚ùå'].includes(reaction.emoji.name) && user.id === message.author.id }

                msg.awaitReactions({ filter, max: 1, time: 20000 }).then(collected => {
                    const reaction = collected.first()

                    if (reaction.emoji.name === '‚úÖ') {
                        sdb.delete(`Request.${message.author.id}`)
                        sdb.set(`Users.${sdb.get(`Users.${message.author.id}.Perfil.Parcas.${position}`)}.Perfil.Parcas.${position}`, false)
                        sdb.set(`Users.${message.author.id}.Perfil.Parcas.${position}`, false)

                        Fam ? Fam.send(`${e.Info} | ${message.author} > ${message.author.tag} \`${message.author.id}\` < separou voc√™s dois como par√ßas.\nSepara√ß√£o pedida em: \`${Data()}\``).catch(() => { }) : ''
                        return msg.edit(`${e.Check} | Separa√ß√£o conclu√≠da! Voc√™ n√£o √© mais par√ßa de ${Fam.tag}.\nSepara√ß√£o pedida em: \`${Data()}\``).catch(() => { })
                    } else {
                        sdb.delete(`Request.${message.author.id}`)
                        msg.edit(`${e.Deny} | Comando cancelado.`).catch(() => { })
                    }
                }).catch(() => {
                    sdb.delete(`Request.${message.author.id}`)
                    msg.edit(`${e.Deny} | Comando cancelado por tempo expirado.`).catch(() => { })
                })

            }).catch(err => {
                Error(message, err)
                message.channel.send(`${e.SaphireCry} | Ocorreu um erro durante o processo. Por favor, reporte o ocorrido usando \`${prefix}bug\`\n\`${err}\``)
            })

        }
    }
}